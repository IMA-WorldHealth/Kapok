angular.module('bhima.controllers')
.controller('report.service_exploitation', [
  '$scope',
  '$filter',
  '$translate',
  '$q',
  '$window',
  'validate',
  'connect',
  'appstate',
  function ($scope, $filter, $translate, $q, $window, validate, connect, appstate) {
    var session = $scope.session = { count : {}, services : [], exploitations : [] },
        state = $scope.state,
        dependencies = {};

    $scope.selected = null;

    dependencies.projects = {
      query : {
        tables : {
          'project' : {
            columns : ['id', 'abbr', 'name']
          }
        }
      }
    };

    dependencies.services = {
      query :'/services/'
    };

    function day () {
      session.dateFrom = new Date();
      session.dateTo = new Date();
    }

    function week () {
      session.dateFrom = new Date();
      session.dateTo = new Date();
      session.dateFrom.setDate(session.dateTo.getDate() - session.dateTo.getDay());
    }

    function month () {
      session.dateFrom = new Date();
      session.dateTo = new Date();
      session.dateFrom.setDate(1);
    }

    $scope.options = [
      {
        label : 'CASH_PAYMENTS.DAY',
        fn : day,
      },
      {
        label : 'CASH_PAYMENTS.WEEK',
        fn : week,
      },
      {
        label : 'CASH_PAYMENTS.MONTH',
        fn : month
      }
    ];

    appstate.register('project', function (project) {
      $scope.project = project;

      validate.process(dependencies)
      .then(function (models) {
        $scope.projects = models.projects;
        session.services = models.services;

        var allProjectIds = models.projects.data.reduce(function (a,b) { return a + ',' + b.id ; }, '').substr(1);
        $scope.projects.post({
          id : allProjectIds,
          name : $translate.instant('CASH_PAYMENTS.ALL_PROJECTS')
        });

        session.project = project.id;
        search($scope.options[0]);
      });
    });

    function search (selection) {
      session.selected = selection;
      selection.fn();
    }

    function reset (services) {
      var req, exploitation,
        selected = $scope.selected = (session.project === $scope.allProjectIds) ? $translate.instant('CASH_PAYMENTS.ALL_PROJECTS') : 'selected';
      session.active = !services;

      if(selected === 'selected'){
        dependencies.project = {
          required: true,
          query : {
            tables : {
              'project' : {
                columns : ['id', 'abbr', 'name']
              }
            },
            where : ['project.id=' + session.project]
          }
        };  
        validate.process(dependencies, ['project'])
        .then(function (model) {
          var dataproject = model.project.data[0];
          $scope.projectSelected = dataproject.name;
        });      
      } else {
        $scope.projectSelected = selected;
      }

      req = {
        dateFrom : $filter('date')(session.dateFrom, 'yyyy-MM-dd'),
        dateTo : $filter('date')(session.dateTo, 'yyyy-MM-dd')
      };

      // Process
      getCostAndProfit(services);

      // Get Cost and Profit
      function getCostAndProfit (services) {
        session.exploitations = [];
        session.charge = 0;
        session.profit = 0;
        var ctr = 0;

        services.data.forEach(function (service) {
          var exploitation = { 
            id : service.id, 
            name : service.service
          };
          
          getCost(service.cost_center_id)
          .then(getProfit(service.profit_center_id))
          .then(handleFinal());

          function getCost(ccId) {
            return connect.req('/cost_periodic/' + session.project + '/' + ccId + '/' + req.dateFrom + '/' + req.dateTo)
            .then(function (result) { 
              exploitation.charge = result.data.cost;
              session.charge += exploitation.charge;
            });
          }

          function getProfit(pcId) {
            return connect.req('/profit_periodic/' + session.project + '/' + pcId + '/' + req.dateFrom + '/' + req.dateTo)
            .then(function (result) { 
              exploitation.profit = result.data.profit;
              session.profit += exploitation.profit;
            });
          }

          function handleFinal () {
            session.exploitations.push(exploitation);
          }

        });
      }
    }

    function generate () {
      if (session.services.data.length) {
        reset(session.services);
        $scope.state = 'generate';
      }
    }

    function reconfigure () {
      $scope.state = null;
    }

    function printReport () { 
      $window.print(); 
    }

    $scope.search = search;
    $scope.reset = reset;
    $scope.generate = generate;
    $scope.reconfigure = reconfigure;
    $scope.printReport = printReport;
  }
]);
